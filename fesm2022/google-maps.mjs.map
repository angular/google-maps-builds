{"version":3,"file":"google-maps.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-event-manager.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/google-map/google-map.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-base-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-bicycling-layer/map-bicycling-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-circle/map-circle.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-directions-renderer/map-directions-renderer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-ground-overlay/map-ground-overlay.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-info-window/map-info-window.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-kml-layer/map-kml-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-marker/map-marker.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/deprecated-map-marker-clusterer/deprecated-map-marker-clusterer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-polygon/map-polygon.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-polyline/map-polyline.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-rectangle/map-rectangle.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-traffic-layer/map-traffic-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-transit-layer/map-transit-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-heatmap-layer/map-heatmap-layer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-advanced-marker/map-advanced-marker.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-marker-clusterer/map-marker-clusterer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/google-maps-module.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-directions-renderer/map-directions-service.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/google-maps/map-geocoder/map-geocoder.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscriber} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\ninterface ListenerHandle {\n  remove(): void;\n}\n\ntype MapEventManagerTarget =\n  | {\n      addListener<T extends unknown[]>(\n        name: string,\n        callback: (...args: T) => void,\n      ): google.maps.MapsEventListener | undefined;\n\n      addEventListener?<T extends unknown[]>(name: string, callback: (...args: T) => void): void;\n      removeEventListener?<T extends unknown[]>(name: string, callback: (...args: T) => void): void;\n    }\n  | undefined;\n\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\nexport class MapEventManager {\n  /** Pending listeners that were added before the target was set. */\n  private _pending: {observable: Observable<unknown>; observer: Subscriber<unknown>}[] = [];\n  private _listeners: ListenerHandle[] = [];\n  private _targetStream = new BehaviorSubject<MapEventManagerTarget>(undefined);\n\n  /** Clears all currently-registered event listeners. */\n  private _clearListeners() {\n    for (const listener of this._listeners) {\n      listener.remove();\n    }\n\n    this._listeners = [];\n  }\n\n  constructor(private _ngZone: NgZone) {}\n\n  /**\n   * Gets an observable that adds an event listener to the map when a consumer subscribes to it.\n   * @param name Name of the event for which the observable is being set up.\n   * @param type Type of the event (e.g. one going to a DOM node or a custom Maps one).\n   */\n  getLazyEmitter<T>(name: string, type?: 'custom' | 'native'): Observable<T> {\n    return this._targetStream.pipe(\n      switchMap(target => {\n        const observable = new Observable<T>(observer => {\n          // If the target hasn't been initialized yet, cache the observer so it can be added later.\n          if (!target) {\n            this._pending.push({observable, observer});\n            return undefined;\n          }\n\n          let handle: ListenerHandle;\n          const listener = (event: T) => {\n            this._ngZone.run(() => observer.next(event));\n          };\n\n          if (type === 'native') {\n            if (\n              (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              (!target.addEventListener || !target.removeEventListener)\n            ) {\n              throw new Error(\n                'Maps event target that uses native events must have `addEventListener` and `removeEventListener` methods.',\n              );\n            }\n\n            target.addEventListener!(name, listener);\n            handle = {remove: () => target.removeEventListener!(name, listener)};\n          } else {\n            handle = target.addListener(name, listener)!;\n          }\n\n          // If there's an error when initializing the Maps API (e.g. a wrong API key), it will\n          // return a dummy object that returns `undefined` from `addListener` (see #26514).\n          if (!handle) {\n            observer.complete();\n            return undefined;\n          }\n\n          this._listeners.push(handle);\n          return () => handle.remove();\n        });\n\n        return observable;\n      }),\n    );\n  }\n\n  /** Sets the current target that the manager should bind events to. */\n  setTarget(target: MapEventManagerTarget) {\n    const currentTarget = this._targetStream.value;\n\n    if (target === currentTarget) {\n      return;\n    }\n\n    // Clear the listeners from the pre-existing target.\n    if (currentTarget) {\n      this._clearListeners();\n      this._pending = [];\n    }\n\n    this._targetStream.next(target);\n\n    // Add the listeners that were bound before the map was initialized.\n    this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n    this._pending = [];\n  }\n\n  /** Destroys the manager and clears the event listeners. */\n  destroy() {\n    this._clearListeners();\n    this._pending = [];\n    this._targetStream.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  PLATFORM_ID,\n  NgZone,\n  SimpleChanges,\n  EventEmitter,\n  inject,\n} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\nimport {Observable} from 'rxjs';\nimport {MapEventManager} from '../map-event-manager';\nimport {take} from 'rxjs/operators';\n\ninterface GoogleMapsWindow extends Window {\n  gm_authFailure?: () => void;\n  google?: typeof google;\n}\n\n/** default options set to the Googleplex */\nexport const DEFAULT_OPTIONS: google.maps.MapOptions = {\n  center: {lat: 37.421995, lng: -122.084092},\n  zoom: 17,\n  // Note: the type conversion here isn't necessary for our CI, but it resolves a g3 failure.\n  mapTypeId: 'roadmap' as unknown as google.maps.MapTypeId,\n};\n\n/** Arbitrary default height for the map element */\nexport const DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nexport const DEFAULT_WIDTH = '500px';\n\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\n@Component({\n  selector: 'google-map',\n  exportAs: 'googleMap',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<div class=\"map-container\"></div><ng-content />',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class GoogleMap implements OnChanges, OnInit, OnDestroy {\n  private readonly _elementRef = inject(ElementRef);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private _mapEl: HTMLElement;\n  private _existingAuthFailureCallback: GoogleMapsWindow['gm_authFailure'];\n\n  /**\n   * The underlying google.maps.Map object\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#Map\n   */\n  googleMap?: google.maps.Map;\n\n  /** Whether we're currently rendering inside a browser. */\n  _isBrowser: boolean;\n\n  /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n  @Input() height: string | number | null = DEFAULT_HEIGHT;\n\n  /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n  @Input() width: string | number | null = DEFAULT_WIDTH;\n\n  /**\n   * The Map ID of the map. This parameter cannot be set or changed after a map is instantiated.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions.mapId\n   */\n  @Input() mapId: string | undefined;\n\n  /**\n   * Type of map that should be rendered. E.g. hybrid map, terrain map etc.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapTypeId\n   */\n  @Input() mapTypeId: google.maps.MapTypeId | undefined;\n\n  @Input()\n  set center(center: google.maps.LatLngLiteral | google.maps.LatLng) {\n    this._center = center;\n  }\n  private _center: google.maps.LatLngLiteral | google.maps.LatLng;\n\n  @Input()\n  set zoom(zoom: number) {\n    this._zoom = zoom;\n  }\n  private _zoom: number;\n\n  @Input()\n  set options(options: google.maps.MapOptions) {\n    this._options = options || DEFAULT_OPTIONS;\n  }\n  private _options = DEFAULT_OPTIONS;\n\n  /** Event emitted when the map is initialized. */\n  @Output() readonly mapInitialized: EventEmitter<google.maps.Map> =\n    new EventEmitter<google.maps.Map>();\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/events#auth-errors\n   */\n  @Output() readonly authFailure: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n   */\n  @Output() readonly boundsChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('bounds_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n   */\n  @Output() readonly centerChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('center_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n   */\n  @Output() readonly mapClick: Observable<google.maps.MapMouseEvent | google.maps.IconMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent | google.maps.IconMouseEvent>(\n      'click',\n    );\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n   */\n  @Output() readonly mapDblclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n   */\n  @Output() readonly mapDrag: Observable<void> = this._eventManager.getLazyEmitter<void>('drag');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n   */\n  @Output() readonly mapDragend: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('dragend');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n   */\n  @Output() readonly mapDragstart: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('dragstart');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n   */\n  @Output() readonly headingChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('heading_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n   */\n  @Output() readonly idle: Observable<void> = this._eventManager.getLazyEmitter<void>('idle');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n   */\n  @Output() readonly maptypeidChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('maptypeid_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n   */\n  @Output()\n  readonly mapMousemove: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n   */\n  @Output() readonly mapMouseout: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n   */\n  @Output() readonly mapMouseover: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n   */\n  @Output() readonly projectionChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('projection_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n   */\n  @Output() readonly mapRightclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n   */\n  @Output() readonly tilesloaded: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('tilesloaded');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n   */\n  @Output() readonly tiltChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('tilt_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n   */\n  @Output() readonly zoomChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('zoom_changed');\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const platformId = inject<Object>(PLATFORM_ID);\n    this._isBrowser = isPlatformBrowser(platformId);\n\n    if (this._isBrowser) {\n      const googleMapsWindow: GoogleMapsWindow = window;\n      if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\n          'Namespace google not found, cannot construct embedded google ' +\n            'map. Please install the Google Maps JavaScript API: ' +\n            'https://developers.google.com/maps/documentation/javascript/' +\n            'tutorial#Loading_the_Maps_API',\n        );\n      }\n\n      this._existingAuthFailureCallback = googleMapsWindow.gm_authFailure;\n      googleMapsWindow.gm_authFailure = () => {\n        if (this._existingAuthFailureCallback) {\n          this._existingAuthFailureCallback();\n        }\n        this.authFailure.emit();\n      };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['height'] || changes['width']) {\n      this._setSize();\n    }\n\n    const googleMap = this.googleMap;\n\n    if (googleMap) {\n      if (changes['options']) {\n        googleMap.setOptions(this._combineOptions());\n      }\n\n      if (changes['center'] && this._center) {\n        googleMap.setCenter(this._center);\n      }\n\n      // Note that the zoom can be zero.\n      if (changes['zoom'] && this._zoom != null) {\n        googleMap.setZoom(this._zoom);\n      }\n\n      if (changes['mapTypeId'] && this.mapTypeId) {\n        googleMap.setMapTypeId(this.mapTypeId);\n      }\n    }\n  }\n\n  ngOnInit() {\n    // It should be a noop during server-side rendering.\n    if (this._isBrowser) {\n      this._mapEl = this._elementRef.nativeElement.querySelector('.map-container')!;\n      this._setSize();\n\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      if (google.maps.Map) {\n        this._initialize(google.maps.Map);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          google.maps\n            .importLibrary('maps')\n            .then(lib => this._initialize((lib as google.maps.MapsLibrary).Map));\n        });\n      }\n    }\n  }\n\n  private _initialize(mapConstructor: typeof google.maps.Map) {\n    this._ngZone.runOutsideAngular(() => {\n      this.googleMap = new mapConstructor(this._mapEl, this._combineOptions());\n      this._eventManager.setTarget(this.googleMap);\n      this.mapInitialized.emit(this.googleMap);\n    });\n  }\n\n  ngOnDestroy() {\n    this.mapInitialized.complete();\n    this._eventManager.destroy();\n\n    if (this._isBrowser) {\n      const googleMapsWindow: GoogleMapsWindow = window;\n      googleMapsWindow.gm_authFailure = this._existingAuthFailureCallback;\n    }\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n   */\n  fitBounds(\n    bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral,\n    padding?: number | google.maps.Padding,\n  ) {\n    this._assertInitialized();\n    this.googleMap.fitBounds(bounds, padding);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n   */\n  panBy(x: number, y: number) {\n    this._assertInitialized();\n    this.googleMap.panBy(x, y);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n   */\n  panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral) {\n    this._assertInitialized();\n    this.googleMap.panTo(latLng);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n   */\n  panToBounds(\n    latLngBounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral,\n    padding?: number | google.maps.Padding,\n  ) {\n    this._assertInitialized();\n    this.googleMap.panToBounds(latLngBounds, padding);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds | null {\n    this._assertInitialized();\n    return this.googleMap.getBounds() || null;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n   */\n  getCenter(): google.maps.LatLng | undefined {\n    this._assertInitialized();\n    return this.googleMap.getCenter();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n   */\n  getClickableIcons(): boolean | undefined {\n    this._assertInitialized();\n    return this.googleMap.getClickableIcons();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n   */\n  getHeading(): number | undefined {\n    this._assertInitialized();\n    return this.googleMap.getHeading();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n   */\n  getMapTypeId(): google.maps.MapTypeId | string | undefined {\n    this._assertInitialized();\n    return this.googleMap.getMapTypeId();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n   */\n  getProjection(): google.maps.Projection | null {\n    this._assertInitialized();\n    return this.googleMap.getProjection() || null;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n   */\n  getStreetView(): google.maps.StreetViewPanorama {\n    this._assertInitialized();\n    return this.googleMap.getStreetView();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n   */\n  getTilt(): number | undefined {\n    this._assertInitialized();\n    return this.googleMap.getTilt();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n   */\n  getZoom(): number | undefined {\n    this._assertInitialized();\n    return this.googleMap.getZoom();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n   */\n  get controls(): google.maps.MVCArray<Node>[] {\n    this._assertInitialized();\n    return this.googleMap.controls;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n   */\n  get data(): google.maps.Data {\n    this._assertInitialized();\n    return this.googleMap.data;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n   */\n  get mapTypes(): google.maps.MapTypeRegistry {\n    this._assertInitialized();\n    return this.googleMap.mapTypes;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n   */\n  get overlayMapTypes(): google.maps.MVCArray<google.maps.MapType | null> {\n    this._assertInitialized();\n    return this.googleMap.overlayMapTypes;\n  }\n\n  /** Returns a promise that resolves when the map has been initialized. */\n  _resolveMap(): Promise<google.maps.Map> {\n    return this.googleMap\n      ? Promise.resolve(this.googleMap)\n      : this.mapInitialized.pipe(take(1)).toPromise();\n  }\n\n  private _setSize() {\n    if (this._mapEl) {\n      const styles = this._mapEl.style;\n      styles.height =\n        this.height === null ? '' : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n      styles.width = this.width === null ? '' : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n    }\n  }\n\n  /** Combines the center and zoom and the other map options into a single object */\n  private _combineOptions(): google.maps.MapOptions {\n    const options = this._options || {};\n    return {\n      ...options,\n      // It's important that we set **some** kind of `center` and `zoom`, otherwise\n      // Google Maps will render a blank rectangle which looks broken.\n      center: this._center || options.center || DEFAULT_OPTIONS.center,\n      zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,\n      // Passing in an undefined `mapTypeId` seems to break tile loading\n      // so make sure that we have some kind of default (see #22082).\n      mapTypeId: this.mapTypeId || options.mapTypeId || DEFAULT_OPTIONS.mapTypeId,\n      mapId: this.mapId || options.mapId,\n    };\n  }\n\n  /** Asserts that the map has been initialized. */\n  private _assertInitialized(): asserts this is {googleMap: google.maps.Map} {\n    if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(\n        'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.',\n      );\n    }\n  }\n}\n\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, NgZone, OnDestroy, OnInit, inject} from '@angular/core';\n\nimport {GoogleMap} from './google-map/google-map';\n\n@Directive({\n  selector: 'map-base-layer',\n  exportAs: 'mapBaseLayer',\n})\nexport class MapBaseLayer implements OnInit, OnDestroy {\n  protected readonly _map = inject(GoogleMap);\n  protected readonly _ngZone = inject(NgZone);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._ngZone.runOutsideAngular(() => {\n        this._initializeObject();\n      });\n      this._assertInitialized();\n      this._setMap();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsetMap();\n  }\n\n  private _assertInitialized() {\n    if (!this._map.googleMap) {\n      throw Error(\n        'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.',\n      );\n    }\n  }\n\n  protected _initializeObject() {}\n  protected _setMap() {}\n  protected _unsetMap() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, EventEmitter, NgZone, OnDestroy, OnInit, Output, inject} from '@angular/core';\n\nimport {GoogleMap} from '../google-map/google-map';\n\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\n@Directive({\n  selector: 'map-bicycling-layer',\n  exportAs: 'mapBicyclingLayer',\n})\nexport class MapBicyclingLayer implements OnInit, OnDestroy {\n  private _map = inject(GoogleMap);\n  private _zone = inject(NgZone);\n\n  /**\n   * The underlying google.maps.BicyclingLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n   */\n  bicyclingLayer?: google.maps.BicyclingLayer;\n\n  /** Event emitted when the bicycling layer is initialized. */\n  @Output() readonly bicyclingLayerInitialized: EventEmitter<google.maps.BicyclingLayer> =\n    new EventEmitter<google.maps.BicyclingLayer>();\n\n  ngOnInit(): void {\n    if (this._map._isBrowser) {\n      if (google.maps.BicyclingLayer && this._map.googleMap) {\n        this._initialize(this._map.googleMap, google.maps.BicyclingLayer);\n      } else {\n        this._zone.runOutsideAngular(() => {\n          Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n            ([map, lib]) => {\n              this._initialize(map, (lib as google.maps.MapsLibrary).BicyclingLayer);\n            },\n          );\n        });\n      }\n    }\n  }\n\n  private _initialize(map: google.maps.Map, layerConstructor: typeof google.maps.BicyclingLayer) {\n    this._zone.runOutsideAngular(() => {\n      this.bicyclingLayer = new layerConstructor();\n      this.bicyclingLayerInitialized.emit(this.bicyclingLayer);\n      this._assertLayerInitialized();\n      this.bicyclingLayer.setMap(map);\n    });\n  }\n\n  ngOnDestroy() {\n    this.bicyclingLayer?.setMap(null);\n  }\n\n  private _assertLayerInitialized(): asserts this is {bicyclingLayer: google.maps.BicyclingLayer} {\n    if (!this.bicyclingLayer) {\n      throw Error(\n        'Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' +\n          'Please wait for the Transit Layer to load before trying to interact with it.',\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\n@Directive({\n  selector: 'map-circle',\n  exportAs: 'mapCircle',\n})\nexport class MapCircle implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.CircleOptions>({});\n  private readonly _center = new BehaviorSubject<\n    google.maps.LatLng | google.maps.LatLngLiteral | undefined\n  >(undefined);\n  private readonly _radius = new BehaviorSubject<number | undefined>(undefined);\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * Underlying google.maps.Circle object.\n   *\n   * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n   */\n  circle?: google.maps.Circle; // initialized in ngOnInit\n\n  @Input()\n  set options(options: google.maps.CircleOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set center(center: google.maps.LatLng | google.maps.LatLngLiteral) {\n    this._center.next(center);\n  }\n\n  @Input()\n  set radius(radius: number) {\n    this._radius.next(radius);\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n   */\n  @Output() readonly centerChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('center_changed');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n   */\n  @Output() readonly circleClick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n   */\n  @Output() readonly circleDblclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n   */\n  @Output() readonly circleDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n   */\n  @Output() readonly circleDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n   */\n  @Output() readonly circleDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n   */\n  @Output() readonly circleMousedown: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n   */\n  @Output() readonly circleMousemove: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n   */\n  @Output() readonly circleMouseout: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n   */\n  @Output() readonly circleMouseover: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n   */\n  @Output() readonly circleMouseup: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n   */\n  @Output() readonly radiusChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('radius_changed');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n   */\n  @Output() readonly circleRightclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /** Event emitted when the circle is initialized. */\n  @Output() readonly circleInitialized: EventEmitter<google.maps.Circle> =\n    new EventEmitter<google.maps.Circle>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (!this._map._isBrowser) {\n      return;\n    }\n\n    this._combineOptions()\n      .pipe(take(1))\n      .subscribe(options => {\n        if (google.maps.Circle && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.Circle, options);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n              ([map, lib]) => {\n                this._initialize(map, (lib as google.maps.MapsLibrary).Circle, options);\n              },\n            );\n          });\n        }\n      });\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    circleConstructor: typeof google.maps.Circle,\n    options: google.maps.CircleOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.circle = new circleConstructor(options);\n      this._assertInitialized();\n      this.circle.setMap(map);\n      this._eventManager.setTarget(this.circle);\n      this.circleInitialized.emit(this.circle);\n      this._watchForOptionsChanges();\n      this._watchForCenterChanges();\n      this._watchForRadiusChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.circle?.setMap(null);\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds | null {\n    this._assertInitialized();\n    return this.circle.getBounds();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n   */\n  getCenter(): google.maps.LatLng | null {\n    this._assertInitialized();\n    return this.circle.getCenter();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.circle.getDraggable();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.circle.getEditable();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n   */\n  getRadius(): number {\n    this._assertInitialized();\n    return this.circle.getRadius();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.circle.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.CircleOptions> {\n    return combineLatest([this._options, this._center, this._radius]).pipe(\n      map(([options, center, radius]) => {\n        const combinedOptions: google.maps.CircleOptions = {\n          ...options,\n          center: center || options.center,\n          radius: radius !== undefined ? radius : options.radius,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.circle.setOptions(options);\n    });\n  }\n\n  private _watchForCenterChanges() {\n    this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n      if (center) {\n        this._assertInitialized();\n        this.circle.setCenter(center);\n      }\n    });\n  }\n\n  private _watchForRadiusChanges() {\n    this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n      if (radius !== undefined) {\n        this._assertInitialized();\n        this.circle.setRadius(radius);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {circle: google.maps.Circle} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.circle) {\n        throw Error(\n          'Cannot interact with a Google Map Circle before it has been ' +\n            'initialized. Please wait for the Circle to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  inject,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Directions Renderer via the Google Maps\n * JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRenderer\n */\n@Directive({\n  selector: 'map-directions-renderer',\n  exportAs: 'mapDirectionsRenderer',\n})\nexport class MapDirectionsRenderer implements OnInit, OnChanges, OnDestroy {\n  private readonly _googleMap = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions.directions\n   */\n  @Input()\n  set directions(directions: google.maps.DirectionsResult) {\n    this._directions = directions;\n  }\n  private _directions: google.maps.DirectionsResult;\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRendererOptions\n   */\n  @Input()\n  set options(options: google.maps.DirectionsRendererOptions) {\n    this._options = options;\n  }\n  private _options: google.maps.DirectionsRendererOptions;\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.directions_changed\n   */\n  @Output()\n  readonly directionsChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('directions_changed');\n\n  /** Event emitted when the directions renderer is initialized. */\n  @Output() readonly directionsRendererInitialized: EventEmitter<google.maps.DirectionsRenderer> =\n    new EventEmitter<google.maps.DirectionsRenderer>();\n\n  /** The underlying google.maps.DirectionsRenderer object. */\n  directionsRenderer?: google.maps.DirectionsRenderer;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      if (google.maps.DirectionsRenderer && this._googleMap.googleMap) {\n        this._initialize(this._googleMap.googleMap, google.maps.DirectionsRenderer);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('routes')]).then(\n            ([map, lib]) => {\n              this._initialize(map, (lib as google.maps.RoutesLibrary).DirectionsRenderer);\n            },\n          );\n        });\n      }\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    rendererConstructor: typeof google.maps.DirectionsRenderer,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.directionsRenderer = new rendererConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.directionsRenderer.setMap(map);\n      this._eventManager.setTarget(this.directionsRenderer);\n      this.directionsRendererInitialized.emit(this.directionsRenderer);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.directionsRenderer) {\n      if (changes['options']) {\n        this.directionsRenderer.setOptions(this._combineOptions());\n      }\n\n      if (changes['directions'] && this._directions !== undefined) {\n        this.directionsRenderer.setDirections(this._directions);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this.directionsRenderer?.setMap(null);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getDirections\n   */\n  getDirections(): google.maps.DirectionsResult | null {\n    this._assertInitialized();\n    return this.directionsRenderer.getDirections();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getPanel\n   */\n  getPanel(): Node | null {\n    this._assertInitialized();\n    return this.directionsRenderer.getPanel();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsRenderer.getRouteIndex\n   */\n  getRouteIndex(): number {\n    this._assertInitialized();\n    return this.directionsRenderer.getRouteIndex();\n  }\n\n  private _combineOptions(): google.maps.DirectionsRendererOptions {\n    const options = this._options || {};\n    return {\n      ...options,\n      directions: this._directions || options.directions,\n      map: this._googleMap.googleMap,\n    };\n  }\n\n  private _assertInitialized(): asserts this is {\n    directionsRenderer: google.maps.DirectionsRenderer;\n  } {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.directionsRenderer) {\n        throw Error(\n          'Cannot interact with a Google Map Directions Renderer before it has been ' +\n            'initialized. Please wait for the Directions Renderer to load before trying ' +\n            'to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\n@Directive({\n  selector: 'map-ground-overlay',\n  exportAs: 'mapGroundOverlay',\n})\nexport class MapGroundOverlay implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _opacity = new BehaviorSubject<number>(1);\n  private readonly _url = new BehaviorSubject<string>('');\n  private readonly _bounds = new BehaviorSubject<\n    google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral | undefined\n  >(undefined);\n  private readonly _destroyed = new Subject<void>();\n  private _hasWatchers: boolean;\n\n  /**\n   * The underlying google.maps.GroundOverlay object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n   */\n  groundOverlay?: google.maps.GroundOverlay;\n\n  /** URL of the image that will be shown in the overlay. */\n  @Input()\n  set url(url: string) {\n    this._url.next(url);\n  }\n\n  /** Bounds for the overlay. */\n  @Input()\n  get bounds(): google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral {\n    return this._bounds.value!;\n  }\n  set bounds(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral) {\n    this._bounds.next(bounds);\n  }\n\n  /** Whether the overlay is clickable */\n  @Input() clickable: boolean = false;\n\n  /** Opacity of the overlay. */\n  @Input()\n  set opacity(opacity: number) {\n    this._opacity.next(opacity);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n   */\n  @Output() readonly mapClick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.dblclick\n   */\n  @Output() readonly mapDblclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /** Event emitted when the ground overlay is initialized. */\n  @Output() readonly groundOverlayInitialized: EventEmitter<google.maps.GroundOverlay> =\n    new EventEmitter<google.maps.GroundOverlay>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      // The ground overlay setup is slightly different from the other Google Maps objects in that\n      // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n      // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n      this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n        if (this.groundOverlay) {\n          this.groundOverlay.setMap(null);\n          this.groundOverlay = undefined;\n        }\n\n        if (!bounds) {\n          return;\n        }\n\n        if (google.maps.GroundOverlay && this._map.googleMap) {\n          this._initialize(this._map.googleMap, google.maps.GroundOverlay, bounds);\n        } else {\n          this._ngZone.runOutsideAngular(() => {\n            Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n              ([map, lib]) => {\n                this._initialize(map, (lib as google.maps.MapsLibrary).GroundOverlay, bounds);\n              },\n            );\n          });\n        }\n      });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    overlayConstructor: typeof google.maps.GroundOverlay,\n    bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.groundOverlay = new overlayConstructor(this._url.getValue(), bounds, {\n        clickable: this.clickable,\n        opacity: this._opacity.value,\n      });\n      this._assertInitialized();\n      this.groundOverlay.setMap(map);\n      this._eventManager.setTarget(this.groundOverlay);\n      this.groundOverlayInitialized.emit(this.groundOverlay);\n\n      // We only need to set up the watchers once.\n      if (!this._hasWatchers) {\n        this._hasWatchers = true;\n        this._watchForOpacityChanges();\n        this._watchForUrlChanges();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.groundOverlay?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds | null {\n    this._assertInitialized();\n    return this.groundOverlay.getBounds();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getOpacity\n   */\n  getOpacity(): number {\n    this._assertInitialized();\n    return this.groundOverlay.getOpacity();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getUrl\n   */\n  getUrl(): string {\n    this._assertInitialized();\n    return this.groundOverlay.getUrl();\n  }\n\n  private _watchForOpacityChanges() {\n    this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n      if (opacity != null) {\n        this.groundOverlay?.setOpacity(opacity);\n      }\n    });\n  }\n\n  private _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      const overlay = this.groundOverlay;\n\n      if (overlay) {\n        overlay.set('url', url);\n        // Google Maps only redraws the overlay if we re-set the map.\n        overlay.setMap(null);\n        overlay.setMap(this._map.googleMap!);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {groundOverlay: google.maps.GroundOverlay} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.groundOverlay) {\n        throw Error(\n          'Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\n            'Please wait for the GroundOverlay to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapAnchorPoint} from '../map-anchor-point';\n\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\n@Directive({\n  selector: 'map-info-window',\n  exportAs: 'mapInfoWindow',\n  host: {'style': 'display: none'},\n})\nexport class MapInfoWindow implements OnInit, OnDestroy {\n  private readonly _googleMap = inject(GoogleMap);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.InfoWindowOptions>({});\n  private readonly _position = new BehaviorSubject<\n    google.maps.LatLngLiteral | google.maps.LatLng | undefined\n  >(undefined);\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * Underlying google.maps.InfoWindow\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow\n   */\n  infoWindow?: google.maps.InfoWindow;\n\n  @Input()\n  set options(options: google.maps.InfoWindowOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set position(position: google.maps.LatLngLiteral | google.maps.LatLng) {\n    this._position.next(position);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n   */\n  @Output() readonly closeclick: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('closeclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.content_changed\n   */\n  @Output() readonly contentChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('content_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n   */\n  @Output() readonly domready: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('domready');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.position_changed\n   */\n  @Output() readonly positionChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('position_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.zindex_changed\n   */\n  @Output() readonly zindexChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('zindex_changed');\n\n  /** Event emitted when the info window is initialized. */\n  @Output() readonly infoWindowInitialized: EventEmitter<google.maps.InfoWindow> =\n    new EventEmitter<google.maps.InfoWindow>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.InfoWindow) {\n            this._initialize(google.maps.InfoWindow, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              google.maps.importLibrary('maps').then(lib => {\n                this._initialize((lib as google.maps.MapsLibrary).InfoWindow, options);\n              });\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    infoWindowConstructor: typeof google.maps.InfoWindow,\n    options: google.maps.InfoWindowOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.infoWindow = new infoWindowConstructor(options);\n      this._eventManager.setTarget(this.infoWindow);\n      this.infoWindowInitialized.emit(this.infoWindow);\n      this._watchForOptionsChanges();\n      this._watchForPositionChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroy.next();\n    this._destroy.complete();\n\n    // If no info window has been created on the server, we do not try closing it.\n    // On the server, an info window cannot be created and this would cause errors.\n    if (this.infoWindow) {\n      this.close();\n    }\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n   */\n  close() {\n    this._assertInitialized();\n    this.infoWindow.close();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n   */\n  getContent(): string | Node | null {\n    this._assertInitialized();\n    return this.infoWindow.getContent() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.getPosition\n   */\n  getPosition(): google.maps.LatLng | null {\n    this._assertInitialized();\n    return this.infoWindow.getPosition() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n   */\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.infoWindow.getZIndex();\n  }\n\n  /**\n   * Opens the MapInfoWindow using the provided AdvancedMarkerElement.\n   * @deprecated Use the `open` method instead.\n   * @breaking-change 20.0.0\n   */\n  openAdvancedMarkerElement(\n    advancedMarkerElement: google.maps.marker.AdvancedMarkerElement,\n    content?: string | Element | Text,\n  ): void {\n    this.open(\n      {\n        getAnchor: () => advancedMarkerElement,\n      },\n      undefined,\n      content,\n    );\n  }\n\n  /**\n   * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n   * then the position property of the options input is used instead.\n   */\n  open(anchor?: MapAnchorPoint, shouldFocus?: boolean, content?: string | Element | Text): void {\n    this._assertInitialized();\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && anchor && !anchor.getAnchor) {\n      throw new Error(\n        'Specified anchor does not implement the `getAnchor` method. ' +\n          'It cannot be used to open an info window.',\n      );\n    }\n\n    const anchorObject = anchor ? anchor.getAnchor() : undefined;\n\n    // Prevent the info window from initializing when trying to reopen on the same anchor.\n    // Note that when the window is opened for the first time, the anchor will always be\n    // undefined. If that's the case, we have to allow it to open in order to handle the\n    // case where the window doesn't have an anchor, but is placed at a particular position.\n    if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n      // If no explicit content is provided, it is taken from the DOM node.\n      // If it is, we need to hide it so it doesn't take up space on the page.\n      this._elementRef.nativeElement.style.display = content ? 'none' : '';\n      if (content) {\n        this.infoWindow.setContent(content);\n      }\n      this.infoWindow.open({\n        map: this._googleMap.googleMap,\n        anchor: anchorObject,\n        shouldFocus,\n      });\n    }\n  }\n\n  private _combineOptions(): Observable<google.maps.InfoWindowOptions> {\n    return combineLatest([this._options, this._position]).pipe(\n      map(([options, position]) => {\n        const combinedOptions: google.maps.InfoWindowOptions = {\n          ...options,\n          position: position || options.position,\n          content: this._elementRef.nativeElement,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n      this._assertInitialized();\n      this.infoWindow.setOptions(options);\n    });\n  }\n\n  private _watchForPositionChanges() {\n    this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n      if (position) {\n        this._assertInitialized();\n        this.infoWindow.setPosition(position);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {infoWindow: google.maps.InfoWindow} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.infoWindow) {\n        throw Error(\n          'Cannot interact with a Google Map Info Window before it has been ' +\n            'initialized. Please wait for the Info Window to load before trying to interact with ' +\n            'it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\n@Directive({\n  selector: 'map-kml-layer',\n  exportAs: 'mapKmlLayer',\n})\nexport class MapKmlLayer implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.KmlLayerOptions>({});\n  private readonly _url = new BehaviorSubject<string>('');\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.KmlLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n   */\n  kmlLayer?: google.maps.KmlLayer;\n\n  @Input()\n  set options(options: google.maps.KmlLayerOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set url(url: string) {\n    this._url.next(url);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n   */\n  @Output() readonly kmlClick: Observable<google.maps.KmlMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.KmlMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml\n   * #KmlLayer.defaultviewport_changed\n   */\n  @Output() readonly defaultviewportChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('defaultviewport_changed');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n   */\n  @Output() readonly statusChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('status_changed');\n\n  /** Event emitted when the KML layer is initialized. */\n  @Output() readonly kmlLayerInitialized: EventEmitter<google.maps.KmlLayer> =\n    new EventEmitter<google.maps.KmlLayer>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.KmlLayer && this._map.googleMap) {\n            this._initialize(this._map.googleMap, google.maps.KmlLayer, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n                ([map, lib]) => {\n                  this._initialize(map, (lib as google.maps.MapsLibrary).KmlLayer, options);\n                },\n              );\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    layerConstructor: typeof google.maps.KmlLayer,\n    options: google.maps.KmlLayerOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.kmlLayer = new layerConstructor(options);\n      this._assertInitialized();\n      this.kmlLayer.setMap(map);\n      this._eventManager.setTarget(this.kmlLayer);\n      this.kmlLayerInitialized.emit(this.kmlLayer);\n      this._watchForOptionsChanges();\n      this._watchForUrlChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.kmlLayer?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n   */\n  getDefaultViewport(): google.maps.LatLngBounds | null {\n    this._assertInitialized();\n    return this.kmlLayer.getDefaultViewport();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n   */\n  getMetadata(): google.maps.KmlLayerMetadata | null {\n    this._assertInitialized();\n    return this.kmlLayer.getMetadata();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n   */\n  getStatus(): google.maps.KmlLayerStatus {\n    this._assertInitialized();\n    return this.kmlLayer.getStatus();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n   */\n  getUrl(): string {\n    this._assertInitialized();\n    return this.kmlLayer.getUrl();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n   */\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.kmlLayer.getZIndex();\n  }\n\n  private _combineOptions(): Observable<google.maps.KmlLayerOptions> {\n    return combineLatest([this._options, this._url]).pipe(\n      map(([options, url]) => {\n        const combinedOptions: google.maps.KmlLayerOptions = {\n          ...options,\n          url: url || options.url,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      if (this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setOptions(options);\n      }\n    });\n  }\n\n  private _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      if (url && this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setUrl(url);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {kmlLayer: google.maps.KmlLayer} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.kmlLayer) {\n        throw Error(\n          'Cannot interact with a Google Map KmlLayer before it has been ' +\n            'initialized. Please wait for the KmlLayer to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n  inject,\n  EventEmitter,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapAnchorPoint} from '../map-anchor-point';\nimport {MAP_MARKER, MarkerDirective} from '../marker-utilities';\n\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nexport const DEFAULT_MARKER_OPTIONS = {\n  position: {lat: 37.421995, lng: -122.084092},\n};\n\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\n@Directive({\n  selector: 'map-marker',\n  exportAs: 'mapMarker',\n  providers: [\n    {\n      provide: MAP_MARKER,\n      useExisting: MapMarker,\n    },\n  ],\n})\nexport class MapMarker implements OnInit, OnChanges, OnDestroy, MapAnchorPoint, MarkerDirective {\n  private readonly _googleMap = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n\n  /**\n   * Title of the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n   */\n  @Input()\n  set title(title: string) {\n    this._title = title;\n  }\n  private _title: string;\n\n  /**\n   * Position of the marker. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n   */\n  @Input()\n  set position(position: google.maps.LatLngLiteral | google.maps.LatLng) {\n    this._position = position;\n  }\n  private _position: google.maps.LatLngLiteral | google.maps.LatLng;\n\n  /**\n   * Label for the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n   */\n  @Input()\n  set label(label: string | google.maps.MarkerLabel) {\n    this._label = label;\n  }\n  private _label: string | google.maps.MarkerLabel;\n\n  /**\n   * Whether the marker is clickable. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n   */\n  @Input()\n  set clickable(clickable: boolean) {\n    this._clickable = clickable;\n  }\n  private _clickable: boolean;\n\n  /**\n   * Options used to configure the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n   */\n  @Input()\n  set options(options: google.maps.MarkerOptions) {\n    this._options = options;\n  }\n  private _options: google.maps.MarkerOptions;\n\n  /**\n   * Icon to be used for the marker.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/marker#Icon\n   */\n  @Input()\n  set icon(icon: string | google.maps.Icon | google.maps.Symbol) {\n    this._icon = icon;\n  }\n  private _icon: string | google.maps.Icon | google.maps.Symbol;\n\n  /**\n   * Whether the marker is visible.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.visible\n   */\n  @Input()\n  set visible(value: boolean) {\n    this._visible = value;\n  }\n  private _visible: boolean;\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n   */\n  @Output() readonly animationChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('animation_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n   */\n  @Output() readonly mapClick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n   */\n  @Output() readonly clickableChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('clickable_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n   */\n  @Output() readonly cursorChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('cursor_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n   */\n  @Output() readonly mapDblclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n   */\n  @Output() readonly mapDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n   */\n  @Output() readonly mapDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n   */\n  @Output() readonly draggableChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('draggable_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n   */\n  @Output() readonly mapDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n   */\n  @Output() readonly flatChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('flat_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n   */\n  @Output() readonly iconChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('icon_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n   */\n  @Output() readonly mapMousedown: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n   */\n  @Output() readonly mapMouseout: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n   */\n  @Output() readonly mapMouseover: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n   */\n  @Output() readonly mapMouseup: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n   */\n  @Output() readonly positionChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('position_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n   */\n  @Output() readonly mapRightclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n   */\n  @Output() readonly shapeChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('shape_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n   */\n  @Output() readonly titleChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('title_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n   */\n  @Output() readonly visibleChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('visible_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n   */\n  @Output() readonly zindexChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('zindex_changed');\n\n  /** Event emitted when the marker is initialized. */\n  @Output() readonly markerInitialized: EventEmitter<google.maps.Marker> =\n    new EventEmitter<google.maps.Marker>();\n\n  /**\n   * The underlying google.maps.Marker object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/marker#Marker\n   */\n  marker?: google.maps.Marker;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (!this._googleMap._isBrowser) {\n      return;\n    }\n\n    if (google.maps.Marker && this._googleMap.googleMap) {\n      this._initialize(this._googleMap.googleMap, google.maps.Marker);\n    } else {\n      this._ngZone.runOutsideAngular(() => {\n        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('marker')]).then(\n          ([map, lib]) => {\n            this._initialize(map, (lib as google.maps.MarkerLibrary).Marker);\n          },\n        );\n      });\n    }\n  }\n\n  private _initialize(map: google.maps.Map, markerConstructor: typeof google.maps.Marker) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.marker = new markerConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.marker.setMap(map);\n      this._eventManager.setTarget(this.marker);\n      this.markerInitialized.next(this.marker);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {marker, _title, _position, _label, _clickable, _icon, _visible} = this;\n\n    if (marker) {\n      if (changes['options']) {\n        marker.setOptions(this._combineOptions());\n      }\n\n      if (changes['title'] && _title !== undefined) {\n        marker.setTitle(_title);\n      }\n\n      if (changes['position'] && _position) {\n        marker.setPosition(_position);\n      }\n\n      if (changes['label'] && _label !== undefined) {\n        marker.setLabel(_label);\n      }\n\n      if (changes['clickable'] && _clickable !== undefined) {\n        marker.setClickable(_clickable);\n      }\n\n      if (changes['icon'] && _icon) {\n        marker.setIcon(_icon);\n      }\n\n      if (changes['visible'] && _visible !== undefined) {\n        marker.setVisible(_visible);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.markerInitialized.complete();\n    this._eventManager.destroy();\n    this.marker?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n   */\n  getAnimation(): google.maps.Animation | null {\n    this._assertInitialized();\n    return this.marker.getAnimation() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n   */\n  getClickable(): boolean {\n    this._assertInitialized();\n    return this.marker.getClickable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n   */\n  getCursor(): string | null {\n    this._assertInitialized();\n    return this.marker.getCursor() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return !!this.marker.getDraggable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n   */\n  getIcon(): string | google.maps.Icon | google.maps.Symbol | null {\n    this._assertInitialized();\n    return this.marker.getIcon() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n   */\n  getLabel(): google.maps.MarkerLabel | string | null {\n    this._assertInitialized();\n    return this.marker.getLabel() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n   */\n  getOpacity(): number | null {\n    this._assertInitialized();\n    return this.marker.getOpacity() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n   */\n  getPosition(): google.maps.LatLng | null {\n    this._assertInitialized();\n    return this.marker.getPosition() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n   */\n  getShape(): google.maps.MarkerShape | null {\n    this._assertInitialized();\n    return this.marker.getShape() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n   */\n  getTitle(): string | null {\n    this._assertInitialized();\n    return this.marker.getTitle() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.marker.getVisible();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n   */\n  getZIndex(): number | null {\n    this._assertInitialized();\n    return this.marker.getZIndex() || null;\n  }\n\n  /** Gets the anchor point that can be used to attach other Google Maps objects. */\n  getAnchor(): google.maps.MVCObject {\n    this._assertInitialized();\n    return this.marker;\n  }\n\n  /** Returns a promise that resolves when the marker has been initialized. */\n  _resolveMarker(): Promise<google.maps.Marker> {\n    return this.marker\n      ? Promise.resolve(this.marker)\n      : this.markerInitialized.pipe(take(1)).toPromise();\n  }\n\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  private _combineOptions(): google.maps.MarkerOptions {\n    const options = this._options || DEFAULT_MARKER_OPTIONS;\n    return {\n      ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      label: this._label || options.label,\n      clickable: this._clickable ?? options.clickable,\n      map: this._googleMap.googleMap,\n      icon: this._icon || options.icon,\n      visible: this._visible ?? options.visible,\n    };\n  }\n\n  private _assertInitialized(): asserts this is {marker: google.maps.Marker} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.marker) {\n        throw Error(\n          'Cannot interact with a Google Map Marker before it has been ' +\n            'initialized. Please wait for the Marker to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapMarker} from '../map-marker/map-marker';\nimport {\n  AriaLabelFn,\n  Calculator,\n  Cluster,\n  ClusterIconStyle,\n  MarkerClusterer as MarkerClustererInstance,\n  MarkerClustererOptions,\n} from './deprecated-marker-clusterer-types';\n\n/** Default options for a clusterer. */\nconst DEFAULT_CLUSTERER_OPTIONS: MarkerClustererOptions = {};\n\n/**\n * The clusterer has to be defined and referred to as a global variable,\n * otherwise it'll cause issues when minified through Closure.\n */\ndeclare const MarkerClusterer: typeof MarkerClustererInstance;\n\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n *\n * @deprecated This component is using a deprecated clustering implementation. Use the\n *   `map-marker-clusterer` component instead.\n * @breaking-change 21.0.0\n *\n */\n@Component({\n  selector: 'deprecated-map-marker-clusterer',\n  exportAs: 'mapMarkerClusterer',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content/>',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DeprecatedMapMarkerClusterer\n  implements OnInit, AfterContentInit, OnChanges, OnDestroy\n{\n  private readonly _googleMap = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private readonly _currentMarkers = new Set<google.maps.Marker>();\n  private readonly _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _destroy = new Subject<void>();\n\n  /** Whether the clusterer is allowed to be initialized. */\n  private readonly _canInitialize = this._googleMap._isBrowser;\n\n  @Input()\n  ariaLabelFn: AriaLabelFn = () => '';\n\n  @Input()\n  set averageCenter(averageCenter: boolean) {\n    this._averageCenter = averageCenter;\n  }\n  private _averageCenter: boolean;\n\n  @Input() batchSize?: number;\n\n  @Input()\n  set batchSizeIE(batchSizeIE: number) {\n    this._batchSizeIE = batchSizeIE;\n  }\n  private _batchSizeIE: number;\n\n  @Input()\n  set calculator(calculator: Calculator) {\n    this._calculator = calculator;\n  }\n  private _calculator: Calculator;\n\n  @Input()\n  set clusterClass(clusterClass: string) {\n    this._clusterClass = clusterClass;\n  }\n  private _clusterClass: string;\n\n  @Input()\n  set enableRetinaIcons(enableRetinaIcons: boolean) {\n    this._enableRetinaIcons = enableRetinaIcons;\n  }\n  private _enableRetinaIcons: boolean;\n\n  @Input()\n  set gridSize(gridSize: number) {\n    this._gridSize = gridSize;\n  }\n  private _gridSize: number;\n\n  @Input()\n  set ignoreHidden(ignoreHidden: boolean) {\n    this._ignoreHidden = ignoreHidden;\n  }\n  private _ignoreHidden: boolean;\n\n  @Input()\n  set imageExtension(imageExtension: string) {\n    this._imageExtension = imageExtension;\n  }\n  private _imageExtension: string;\n\n  @Input()\n  set imagePath(imagePath: string) {\n    this._imagePath = imagePath;\n  }\n  private _imagePath: string;\n\n  @Input()\n  set imageSizes(imageSizes: number[]) {\n    this._imageSizes = imageSizes;\n  }\n  private _imageSizes: number[];\n\n  @Input()\n  set maxZoom(maxZoom: number) {\n    this._maxZoom = maxZoom;\n  }\n  private _maxZoom: number;\n\n  @Input()\n  set minimumClusterSize(minimumClusterSize: number) {\n    this._minimumClusterSize = minimumClusterSize;\n  }\n  private _minimumClusterSize: number;\n\n  @Input()\n  set styles(styles: ClusterIconStyle[]) {\n    this._styles = styles;\n  }\n  private _styles: ClusterIconStyle[];\n\n  @Input()\n  set title(title: string) {\n    this._title = title;\n  }\n  private _title: string;\n\n  @Input()\n  set zIndex(zIndex: number) {\n    this._zIndex = zIndex;\n  }\n  private _zIndex: number;\n\n  @Input()\n  set zoomOnClick(zoomOnClick: boolean) {\n    this._zoomOnClick = zoomOnClick;\n  }\n  private _zoomOnClick: boolean;\n\n  @Input()\n  set options(options: MarkerClustererOptions) {\n    this._options = options;\n  }\n  private _options: MarkerClustererOptions;\n\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/\n   * _google_markerclustererplus.html#clusteringbegin\n   */\n  @Output() readonly clusteringbegin: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('clusteringbegin');\n\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n   */\n  @Output() readonly clusteringend: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('clusteringend');\n\n  /** Emits when a cluster has been clicked. */\n  @Output()\n  readonly clusterClick: Observable<Cluster> = this._eventManager.getLazyEmitter<Cluster>('click');\n\n  @ContentChildren(MapMarker, {descendants: true}) _markers: QueryList<MapMarker>;\n\n  /**\n   * The underlying MarkerClusterer object.\n   *\n   * See\n   * googlemaps.github.io/v3-utility-library/classes/\n   * _google_markerclustererplus.markerclusterer.html\n   */\n  markerClusterer?: MarkerClustererInstance;\n\n  /** Event emitted when the clusterer is initialized. */\n  @Output() readonly markerClustererInitialized: EventEmitter<MarkerClustererInstance> =\n    new EventEmitter<MarkerClustererInstance>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._canInitialize) {\n      this._ngZone.runOutsideAngular(() => {\n        this._googleMap._resolveMap().then(map => {\n          if (\n            typeof MarkerClusterer !== 'function' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)\n          ) {\n            throw Error(\n              'MarkerClusterer class not found, cannot construct a marker cluster. ' +\n                'Please install the MarkerClustererPlus library: ' +\n                'https://github.com/googlemaps/js-markerclustererplus',\n            );\n          }\n\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          this.markerClusterer = this._ngZone.runOutsideAngular(() => {\n            return new MarkerClusterer(map, [], this._combineOptions());\n          });\n\n          this._assertInitialized();\n          this._eventManager.setTarget(this.markerClusterer);\n          this.markerClustererInitialized.emit(this.markerClusterer);\n        });\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this._canInitialize) {\n      if (this.markerClusterer) {\n        this._watchForMarkerChanges();\n      } else {\n        this.markerClustererInitialized\n          .pipe(take(1), takeUntil(this._destroy))\n          .subscribe(() => this._watchForMarkerChanges());\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {\n      markerClusterer: clusterer,\n      ariaLabelFn,\n      _averageCenter,\n      _batchSizeIE,\n      _calculator,\n      _styles,\n      _clusterClass,\n      _enableRetinaIcons,\n      _gridSize,\n      _ignoreHidden,\n      _imageExtension,\n      _imagePath,\n      _imageSizes,\n      _maxZoom,\n      _minimumClusterSize,\n      _title,\n      _zIndex,\n      _zoomOnClick,\n    } = this;\n\n    if (clusterer) {\n      if (changes['options']) {\n        clusterer.setOptions(this._combineOptions());\n      }\n      if (changes['ariaLabelFn']) {\n        clusterer.ariaLabelFn = ariaLabelFn;\n      }\n      if (changes['averageCenter'] && _averageCenter !== undefined) {\n        clusterer.setAverageCenter(_averageCenter);\n      }\n      if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n        clusterer.setBatchSizeIE(_batchSizeIE);\n      }\n      if (changes['calculator'] && !!_calculator) {\n        clusterer.setCalculator(_calculator);\n      }\n      if (changes['clusterClass'] && _clusterClass !== undefined) {\n        clusterer.setClusterClass(_clusterClass);\n      }\n      if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n        clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n      }\n      if (changes['gridSize'] && _gridSize !== undefined) {\n        clusterer.setGridSize(_gridSize);\n      }\n      if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n        clusterer.setIgnoreHidden(_ignoreHidden);\n      }\n      if (changes['imageExtension'] && _imageExtension !== undefined) {\n        clusterer.setImageExtension(_imageExtension);\n      }\n      if (changes['imagePath'] && _imagePath !== undefined) {\n        clusterer.setImagePath(_imagePath);\n      }\n      if (changes['imageSizes'] && _imageSizes) {\n        clusterer.setImageSizes(_imageSizes);\n      }\n      if (changes['maxZoom'] && _maxZoom !== undefined) {\n        clusterer.setMaxZoom(_maxZoom);\n      }\n      if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n        clusterer.setMinimumClusterSize(_minimumClusterSize);\n      }\n      if (changes['styles'] && _styles) {\n        clusterer.setStyles(_styles);\n      }\n      if (changes['title'] && _title !== undefined) {\n        clusterer.setTitle(_title);\n      }\n      if (changes['zIndex'] && _zIndex !== undefined) {\n        clusterer.setZIndex(_zIndex);\n      }\n      if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n        clusterer.setZoomOnClick(_zoomOnClick);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this._eventManager.destroy();\n    this.markerClusterer?.setMap(null);\n  }\n\n  fitMapToMarkers(padding: number | google.maps.Padding) {\n    this._assertInitialized();\n    this.markerClusterer.fitMapToMarkers(padding);\n  }\n\n  getAverageCenter(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getAverageCenter();\n  }\n\n  getBatchSizeIE(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getBatchSizeIE();\n  }\n\n  getCalculator(): Calculator {\n    this._assertInitialized();\n    return this.markerClusterer.getCalculator();\n  }\n\n  getClusterClass(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getClusterClass();\n  }\n\n  getClusters(): Cluster[] {\n    this._assertInitialized();\n    return this.markerClusterer.getClusters();\n  }\n\n  getEnableRetinaIcons(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getEnableRetinaIcons();\n  }\n\n  getGridSize(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getGridSize();\n  }\n\n  getIgnoreHidden(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getIgnoreHidden();\n  }\n\n  getImageExtension(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getImageExtension();\n  }\n\n  getImagePath(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getImagePath();\n  }\n\n  getImageSizes(): number[] {\n    this._assertInitialized();\n    return this.markerClusterer.getImageSizes();\n  }\n\n  getMaxZoom(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getMaxZoom();\n  }\n\n  getMinimumClusterSize(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getMinimumClusterSize();\n  }\n\n  getStyles(): ClusterIconStyle[] {\n    this._assertInitialized();\n    return this.markerClusterer.getStyles();\n  }\n\n  getTitle(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getTitle();\n  }\n\n  getTotalClusters(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalClusters();\n  }\n\n  getTotalMarkers(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalMarkers();\n  }\n\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getZIndex();\n  }\n\n  getZoomOnClick(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getZoomOnClick();\n  }\n\n  private _combineOptions(): MarkerClustererOptions {\n    const options = this._options || DEFAULT_CLUSTERER_OPTIONS;\n    return {\n      ...options,\n      ariaLabelFn: this.ariaLabelFn ?? options.ariaLabelFn,\n      averageCenter: this._averageCenter ?? options.averageCenter,\n      batchSize: this.batchSize ?? options.batchSize,\n      batchSizeIE: this._batchSizeIE ?? options.batchSizeIE,\n      calculator: this._calculator ?? options.calculator,\n      clusterClass: this._clusterClass ?? options.clusterClass,\n      enableRetinaIcons: this._enableRetinaIcons ?? options.enableRetinaIcons,\n      gridSize: this._gridSize ?? options.gridSize,\n      ignoreHidden: this._ignoreHidden ?? options.ignoreHidden,\n      imageExtension: this._imageExtension ?? options.imageExtension,\n      imagePath: this._imagePath ?? options.imagePath,\n      imageSizes: this._imageSizes ?? options.imageSizes,\n      maxZoom: this._maxZoom ?? options.maxZoom,\n      minimumClusterSize: this._minimumClusterSize ?? options.minimumClusterSize,\n      styles: this._styles ?? options.styles,\n      title: this._title ?? options.title,\n      zIndex: this._zIndex ?? options.zIndex,\n      zoomOnClick: this._zoomOnClick ?? options.zoomOnClick,\n    };\n  }\n\n  private _watchForMarkerChanges() {\n    this._assertInitialized();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._getInternalMarkers(this._markers).then(markers => {\n        const initialMarkers: google.maps.Marker[] = [];\n        for (const marker of markers) {\n          this._currentMarkers.add(marker);\n          initialMarkers.push(marker);\n        }\n        this.markerClusterer.addMarkers(initialMarkers);\n      });\n    });\n\n    this._markers.changes\n      .pipe(takeUntil(this._destroy))\n      .subscribe((markerComponents: MapMarker[]) => {\n        this._assertInitialized();\n        this._ngZone.runOutsideAngular(() => {\n          this._getInternalMarkers(markerComponents).then(markers => {\n            const newMarkers = new Set(markers);\n            const markersToAdd: google.maps.Marker[] = [];\n            const markersToRemove: google.maps.Marker[] = [];\n            for (const marker of Array.from(newMarkers)) {\n              if (!this._currentMarkers.has(marker)) {\n                this._currentMarkers.add(marker);\n                markersToAdd.push(marker);\n              }\n            }\n            for (const marker of Array.from(this._currentMarkers)) {\n              if (!newMarkers.has(marker)) {\n                markersToRemove.push(marker);\n              }\n            }\n            this.markerClusterer.addMarkers(markersToAdd, true);\n            this.markerClusterer.removeMarkers(markersToRemove, true);\n            this.markerClusterer.repaint();\n            for (const marker of markersToRemove) {\n              this._currentMarkers.delete(marker);\n            }\n          });\n        });\n      });\n  }\n\n  private _getInternalMarkers(\n    markers: MapMarker[] | QueryList<MapMarker>,\n  ): Promise<google.maps.Marker[]> {\n    return Promise.all(markers.map(markerComponent => markerComponent._resolveMarker()));\n  }\n\n  private _assertInitialized(): asserts this is {markerClusterer: MarkerClustererInstance} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.markerClusterer) {\n        throw Error(\n          'Cannot interact with a MarkerClusterer before it has been initialized. ' +\n            'Please wait for the MarkerClusterer to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  inject,\n  EventEmitter,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\n@Directive({\n  selector: 'map-polygon',\n  exportAs: 'mapPolygon',\n})\nexport class MapPolygon implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.PolygonOptions>({});\n  private readonly _paths = new BehaviorSubject<\n    | google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>>\n    | google.maps.MVCArray<google.maps.LatLng>\n    | google.maps.LatLng[]\n    | google.maps.LatLngLiteral[]\n    | undefined\n  >(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Polygon object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n   */\n  polygon?: google.maps.Polygon;\n\n  @Input()\n  set options(options: google.maps.PolygonOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set paths(\n    paths:\n      | google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>>\n      | google.maps.MVCArray<google.maps.LatLng>\n      | google.maps.LatLng[]\n      | google.maps.LatLngLiteral[],\n  ) {\n    this._paths.next(paths);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n   */\n  @Output() readonly polygonClick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('click');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n   */\n  @Output() readonly polygonDblclick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('dblclick');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n   */\n  @Output() readonly polygonDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n   */\n  @Output() readonly polygonDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n   */\n  @Output() readonly polygonDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n   */\n  @Output() readonly polygonMousedown: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousedown');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n   */\n  @Output() readonly polygonMousemove: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousemove');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n   */\n  @Output() readonly polygonMouseout: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseout');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n   */\n  @Output() readonly polygonMouseover: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseover');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n   */\n  @Output() readonly polygonMouseup: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseup');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n   */\n  @Output() readonly polygonRightclick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('rightclick');\n\n  /** Event emitted when the polygon is initialized. */\n  @Output() readonly polygonInitialized: EventEmitter<google.maps.Polygon> =\n    new EventEmitter<google.maps.Polygon>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.Polygon && this._map.googleMap) {\n            this._initialize(this._map.googleMap, google.maps.Polygon, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n                ([map, lib]) => {\n                  this._initialize(map, (lib as google.maps.MapsLibrary).Polygon, options);\n                },\n              );\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    polygonConstructor: typeof google.maps.Polygon,\n    options: google.maps.PolygonOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.polygon = new polygonConstructor(options);\n      this._assertInitialized();\n      this.polygon.setMap(map);\n      this._eventManager.setTarget(this.polygon);\n      this.polygonInitialized.emit(this.polygon);\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.polygon?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.polygon.getDraggable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.polygon.getEditable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n   */\n  getPath(): google.maps.MVCArray<google.maps.LatLng> {\n    this._assertInitialized();\n    return this.polygon.getPath();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n   */\n  getPaths(): google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>> {\n    this._assertInitialized();\n    return this.polygon.getPaths();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.polygon.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.PolygonOptions> {\n    return combineLatest([this._options, this._paths]).pipe(\n      map(([options, paths]) => {\n        const combinedOptions: google.maps.PolygonOptions = {\n          ...options,\n          paths: paths || options.paths,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polygon.setOptions(options);\n    });\n  }\n\n  private _watchForPathChanges() {\n    this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n      if (paths) {\n        this._assertInitialized();\n        this.polygon.setPaths(paths);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {polygon: google.maps.Polygon} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.polygon) {\n        throw Error(\n          'Cannot interact with a Google Map Polygon before it has been ' +\n            'initialized. Please wait for the Polygon to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  inject,\n  EventEmitter,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\n@Directive({\n  selector: 'map-polyline',\n  exportAs: 'mapPolyline',\n})\nexport class MapPolyline implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.PolylineOptions>({});\n  private readonly _path = new BehaviorSubject<\n    | google.maps.MVCArray<google.maps.LatLng>\n    | google.maps.LatLng[]\n    | google.maps.LatLngLiteral[]\n    | undefined\n  >(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Polyline object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n   */\n  polyline?: google.maps.Polyline;\n\n  @Input()\n  set options(options: google.maps.PolylineOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set path(\n    path:\n      | google.maps.MVCArray<google.maps.LatLng>\n      | google.maps.LatLng[]\n      | google.maps.LatLngLiteral[],\n  ) {\n    this._path.next(path);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n   */\n  @Output() readonly polylineClick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('click');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n   */\n  @Output() readonly polylineDblclick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('dblclick');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n   */\n  @Output() readonly polylineDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n   */\n  @Output() readonly polylineDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n   */\n  @Output() readonly polylineDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n   */\n  @Output() readonly polylineMousedown: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousedown');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n   */\n  @Output() readonly polylineMousemove: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousemove');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n   */\n  @Output() readonly polylineMouseout: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseout');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n   */\n  @Output() readonly polylineMouseover: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseover');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n   */\n  @Output() readonly polylineMouseup: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseup');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n   */\n  @Output() readonly polylineRightclick: Observable<google.maps.PolyMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('rightclick');\n\n  /** Event emitted when the polyline is initialized. */\n  @Output() readonly polylineInitialized: EventEmitter<google.maps.Polyline> =\n    new EventEmitter<google.maps.Polyline>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.Polyline && this._map.googleMap) {\n            this._initialize(this._map.googleMap, google.maps.Polyline, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n                ([map, lib]) => {\n                  this._initialize(map, (lib as google.maps.MapsLibrary).Polyline, options);\n                },\n              );\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    polylineConstructor: typeof google.maps.Polyline,\n    options: google.maps.PolygonOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.polyline = new polylineConstructor(options);\n      this._assertInitialized();\n      this.polyline.setMap(map);\n      this._eventManager.setTarget(this.polyline);\n      this.polylineInitialized.emit(this.polyline);\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.polyline?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.polyline.getDraggable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.polyline.getEditable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n   */\n  getPath(): google.maps.MVCArray<google.maps.LatLng> {\n    this._assertInitialized();\n    return this.polyline.getPath();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.polyline.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.PolylineOptions> {\n    return combineLatest([this._options, this._path]).pipe(\n      map(([options, path]) => {\n        const combinedOptions: google.maps.PolylineOptions = {\n          ...options,\n          path: path || options.path,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polyline.setOptions(options);\n    });\n  }\n\n  private _watchForPathChanges() {\n    this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n      if (path) {\n        this._assertInitialized();\n        this.polyline.setPath(path);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {polyline: google.maps.Polyline} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.polyline) {\n        throw Error(\n          'Cannot interact with a Google Map Polyline before it has been ' +\n            'initialized. Please wait for the Polyline to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  inject,\n  EventEmitter,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\n@Directive({\n  selector: 'map-rectangle',\n  exportAs: 'mapRectangle',\n})\nexport class MapRectangle implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n  private readonly _options = new BehaviorSubject<google.maps.RectangleOptions>({});\n  private readonly _bounds = new BehaviorSubject<\n    google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral | undefined\n  >(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Rectangle object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n   */\n  rectangle?: google.maps.Rectangle;\n\n  @Input()\n  set options(options: google.maps.RectangleOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set bounds(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral) {\n    this._bounds.next(bounds);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n   */ @Output() readonly boundsChanged: Observable<void> =\n    this._eventManager.getLazyEmitter<void>('bounds_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n   */\n  @Output() readonly rectangleClick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n   */\n  @Output() readonly rectangleDblclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n   */\n  @Output() readonly rectangleDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n   */\n  @Output() readonly rectangleDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n   */\n  @Output() readonly rectangleDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n   */\n  @Output() readonly rectangleMousedown: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n   */\n  @Output() readonly rectangleMousemove: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n   */\n  @Output() readonly rectangleMouseout: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n   */\n  @Output() readonly rectangleMouseover: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n   */\n  @Output() readonly rectangleMouseup: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n   */\n  @Output() readonly rectangleRightclick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /** Event emitted when the rectangle is initialized. */\n  @Output() readonly rectangleInitialized: EventEmitter<google.maps.Rectangle> =\n    new EventEmitter<google.maps.Rectangle>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.Rectangle && this._map.googleMap) {\n            this._initialize(this._map.googleMap, google.maps.Rectangle, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n                ([map, lib]) => {\n                  this._initialize(map, (lib as google.maps.MapsLibrary).Rectangle, options);\n                },\n              );\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    rectangleConstructor: typeof google.maps.Rectangle,\n    options: google.maps.RectangleOptions,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.rectangle = new rectangleConstructor(options);\n      this._assertInitialized();\n      this.rectangle.setMap(map);\n      this._eventManager.setTarget(this.rectangle);\n      this.rectangleInitialized.emit(this.rectangle);\n      this._watchForOptionsChanges();\n      this._watchForBoundsChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.rectangle?.setMap(null);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds | null {\n    this._assertInitialized();\n    return this.rectangle.getBounds();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getDraggable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getEditable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.RectangleOptions> {\n    return combineLatest([this._options, this._bounds]).pipe(\n      map(([options, bounds]) => {\n        const combinedOptions: google.maps.RectangleOptions = {\n          ...options,\n          bounds: bounds || options.bounds,\n        };\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.rectangle.setOptions(options);\n    });\n  }\n\n  private _watchForBoundsChanges() {\n    this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n      if (bounds) {\n        this._assertInitialized();\n        this.rectangle.setBounds(bounds);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {rectangle: google.maps.Rectangle} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.rectangle) {\n        throw Error(\n          'Cannot interact with a Google Map Rectangle before it has been initialized. ' +\n            'Please wait for the Rectangle to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\n\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\n@Directive({\n  selector: 'map-traffic-layer',\n  exportAs: 'mapTrafficLayer',\n})\nexport class MapTrafficLayer implements OnInit, OnDestroy {\n  private readonly _map = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private readonly _autoRefresh = new BehaviorSubject<boolean>(true);\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.TrafficLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n   */\n  trafficLayer?: google.maps.TrafficLayer;\n\n  /**\n   * Whether the traffic layer refreshes with updated information automatically.\n   */\n  @Input()\n  set autoRefresh(autoRefresh: boolean) {\n    this._autoRefresh.next(autoRefresh);\n  }\n\n  /** Event emitted when the traffic layer is initialized. */\n  @Output() readonly trafficLayerInitialized: EventEmitter<google.maps.TrafficLayer> =\n    new EventEmitter<google.maps.TrafficLayer>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions()\n        .pipe(take(1))\n        .subscribe(options => {\n          if (google.maps.TrafficLayer && this._map.googleMap) {\n            this._initialize(this._map.googleMap, google.maps.TrafficLayer, options);\n          } else {\n            this._ngZone.runOutsideAngular(() => {\n              Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n                ([map, lib]) => {\n                  this._initialize(map, (lib as google.maps.MapsLibrary).TrafficLayer, options);\n                },\n              );\n            });\n          }\n        });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    layerConstructor: typeof google.maps.TrafficLayer,\n    options: google.maps.TrafficLayerOptions,\n  ) {\n    this._ngZone.runOutsideAngular(() => {\n      this.trafficLayer = new layerConstructor(options);\n      this._assertInitialized();\n      this.trafficLayer.setMap(map);\n      this.trafficLayerInitialized.emit(this.trafficLayer);\n      this._watchForAutoRefreshChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.trafficLayer?.setMap(null);\n  }\n\n  private _combineOptions(): Observable<google.maps.TrafficLayerOptions> {\n    return this._autoRefresh.pipe(\n      map(autoRefresh => {\n        const combinedOptions: google.maps.TrafficLayerOptions = {autoRefresh};\n        return combinedOptions;\n      }),\n    );\n  }\n\n  private _watchForAutoRefreshChanges() {\n    this._combineOptions()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(options => {\n        this._assertInitialized();\n        this.trafficLayer.setOptions(options);\n      });\n  }\n\n  private _assertInitialized(): asserts this is {trafficLayer: google.maps.TrafficLayer} {\n    if (!this.trafficLayer) {\n      throw Error(\n        'Cannot interact with a Google Map Traffic Layer before it has been initialized. ' +\n          'Please wait for the Traffic Layer to load before trying to interact with it.',\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, EventEmitter, NgZone, OnDestroy, OnInit, Output, inject} from '@angular/core';\n\nimport {GoogleMap} from '../google-map/google-map';\n\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\n@Directive({\n  selector: 'map-transit-layer',\n  exportAs: 'mapTransitLayer',\n})\nexport class MapTransitLayer implements OnInit, OnDestroy {\n  private _map = inject(GoogleMap);\n  private _zone = inject(NgZone);\n\n  /**\n   * The underlying google.maps.TransitLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n   */\n  transitLayer?: google.maps.TransitLayer;\n\n  /** Event emitted when the transit layer is initialized. */\n  @Output() readonly transitLayerInitialized: EventEmitter<google.maps.TransitLayer> =\n    new EventEmitter<google.maps.TransitLayer>();\n\n  ngOnInit(): void {\n    if (this._map._isBrowser) {\n      if (google.maps.TransitLayer && this._map.googleMap) {\n        this._initialize(this._map.googleMap, google.maps.TransitLayer);\n      } else {\n        this._zone.runOutsideAngular(() => {\n          Promise.all([this._map._resolveMap(), google.maps.importLibrary('maps')]).then(\n            ([map, lib]) => {\n              this._initialize(map, (lib as google.maps.MapsLibrary).TransitLayer);\n            },\n          );\n        });\n      }\n    }\n  }\n\n  private _initialize(map: google.maps.Map, layerConstructor: typeof google.maps.TransitLayer) {\n    this._zone.runOutsideAngular(() => {\n      this.transitLayer = new layerConstructor();\n      this.transitLayerInitialized.emit(this.transitLayer);\n      this._assertLayerInitialized();\n      this.transitLayer.setMap(map);\n    });\n  }\n\n  ngOnDestroy() {\n    this.transitLayer?.setMap(null);\n  }\n\n  private _assertLayerInitialized(): asserts this is {transitLayer: google.maps.TransitLayer} {\n    if (!this.transitLayer) {\n      throw Error(\n        'Cannot interact with a Google Map Transit Layer before it has been initialized. ' +\n          'Please wait for the Transit Layer to load before trying to interact with it.',\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Input,\n  OnDestroy,\n  OnInit,\n  NgZone,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  inject,\n} from '@angular/core';\n\nimport {GoogleMap} from '../google-map/google-map';\n\n/** Possible data that can be shown on a heatmap layer. */\nexport type HeatmapData =\n  | google.maps.MVCArray<\n      google.maps.LatLng | google.maps.visualization.WeightedLocation | google.maps.LatLngLiteral\n    >\n  | (google.maps.LatLng | google.maps.visualization.WeightedLocation | google.maps.LatLngLiteral)[];\n\n/**\n * Angular directive that renders a Google Maps heatmap via the Google Maps JavaScript API.\n *\n * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n */\n@Directive({\n  selector: 'map-heatmap-layer',\n  exportAs: 'mapHeatmapLayer',\n})\nexport class MapHeatmapLayer implements OnInit, OnChanges, OnDestroy {\n  private readonly _googleMap = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n\n  /**\n   * Data shown on the heatmap.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n   */\n  @Input()\n  set data(data: HeatmapData) {\n    this._data = data;\n  }\n  private _data: HeatmapData;\n\n  /**\n   * Options used to configure the heatmap. See:\n   * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions\n   */\n  @Input()\n  set options(options: Partial<google.maps.visualization.HeatmapLayerOptions>) {\n    this._options = options;\n  }\n  private _options: Partial<google.maps.visualization.HeatmapLayerOptions>;\n\n  /**\n   * The underlying google.maps.visualization.HeatmapLayer object.\n   *\n   * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n   */\n  heatmap?: google.maps.visualization.HeatmapLayer;\n\n  /** Event emitted when the heatmap is initialized. */\n  @Output() readonly heatmapInitialized: EventEmitter<google.maps.visualization.HeatmapLayer> =\n    new EventEmitter<google.maps.visualization.HeatmapLayer>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      if (\n        !window.google?.maps?.visualization &&\n        !window.google?.maps.importLibrary &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)\n      ) {\n        throw Error(\n          'Namespace `google.maps.visualization` not found, cannot construct heatmap. ' +\n            'Please install the Google Maps JavaScript API with the \"visualization\" library: ' +\n            'https://developers.google.com/maps/documentation/javascript/visualization',\n        );\n      }\n\n      if (google.maps.visualization?.HeatmapLayer && this._googleMap.googleMap) {\n        this._initialize(this._googleMap.googleMap, google.maps.visualization.HeatmapLayer);\n      } else {\n        this._ngZone.runOutsideAngular(() => {\n          Promise.all([\n            this._googleMap._resolveMap(),\n            google.maps.importLibrary('visualization'),\n          ]).then(([map, lib]) => {\n            this._initialize(map, (lib as google.maps.VisualizationLibrary).HeatmapLayer);\n          });\n        });\n      }\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    heatmapConstructor: typeof google.maps.visualization.HeatmapLayer,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.heatmap = new heatmapConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.heatmap.setMap(map);\n      this.heatmapInitialized.emit(this.heatmap);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {_data, heatmap} = this;\n\n    if (heatmap) {\n      if (changes['options']) {\n        heatmap.setOptions(this._combineOptions());\n      }\n\n      if (changes['data'] && _data !== undefined) {\n        heatmap.setData(this._normalizeData(_data));\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.heatmap?.setMap(null);\n  }\n\n  /**\n   * Gets the data that is currently shown on the heatmap.\n   * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer\n   */\n  getData(): HeatmapData {\n    this._assertInitialized();\n    return this.heatmap.getData();\n  }\n\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  private _combineOptions(): google.maps.visualization.HeatmapLayerOptions {\n    const options = this._options || {};\n    return {\n      ...options,\n      data: this._normalizeData(this._data || options.data || []),\n      map: this._googleMap.googleMap,\n    };\n  }\n\n  /**\n   * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more\n   * convenient to write out, because the Google Maps API doesn't have to have been loaded in order\n   * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`\n   * object, or it throws a runtime error. Since it's more convenient and we expect that Angular\n   * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we\n   * convert it to a `LatLng` object before passing it off to Google Maps.\n   */\n  private _normalizeData(data: HeatmapData) {\n    const result: (google.maps.LatLng | google.maps.visualization.WeightedLocation)[] = [];\n\n    data.forEach(item => {\n      result.push(isLatLngLiteral(item) ? new google.maps.LatLng(item.lat, item.lng) : item);\n    });\n\n    return result;\n  }\n\n  /** Asserts that the heatmap object has been initialized. */\n  private _assertInitialized(): asserts this is {heatmap: google.maps.visualization.HeatmapLayer} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.heatmap) {\n        throw Error(\n          'Cannot interact with a Google Map HeatmapLayer before it has been ' +\n            'initialized. Please wait for the heatmap to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n\n/** Asserts that an object is a `LatLngLiteral`. */\nfunction isLatLngLiteral(value: any): value is google.maps.LatLngLiteral {\n  return value && typeof value.lat === 'number' && typeof value.lng === 'number';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n  inject,\n  EventEmitter,\n} from '@angular/core';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapAnchorPoint} from '../map-anchor-point';\nimport {MAP_MARKER, MarkerDirective} from '../marker-utilities';\nimport {Observable} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nexport const DEFAULT_MARKER_OPTIONS = {\n  position: {lat: 37.221995, lng: -122.184092},\n};\n\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\n@Directive({\n  selector: 'map-advanced-marker',\n  exportAs: 'mapAdvancedMarker',\n  providers: [\n    {\n      provide: MAP_MARKER,\n      useExisting: MapAdvancedMarker,\n    },\n  ],\n})\nexport class MapAdvancedMarker\n  implements OnInit, OnChanges, OnDestroy, MapAnchorPoint, MarkerDirective\n{\n  private readonly _googleMap = inject(GoogleMap);\n  private _ngZone = inject(NgZone);\n  private _eventManager = new MapEventManager(inject(NgZone));\n\n  /**\n   * Rollover text. If provided, an accessibility text (e.g. for use with screen readers) will be added to the AdvancedMarkerElement with the provided value.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.title\n   */\n  @Input()\n  set title(title: string) {\n    this._title = title;\n  }\n  private _title: string;\n\n  /**\n   * Sets the AdvancedMarkerElement's position. An AdvancedMarkerElement may be constructed without a position, but will not be displayed until its position is provided - for example, by a user's actions or choices. An AdvancedMarkerElement's position can be provided by setting AdvancedMarkerElement.position if not provided at the construction.\n   * Note: AdvancedMarkerElement with altitude is only supported on vector maps.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.position\n   */\n  @Input()\n  set position(\n    position:\n      | google.maps.LatLngLiteral\n      | google.maps.LatLng\n      | google.maps.LatLngAltitude\n      | google.maps.LatLngAltitudeLiteral,\n  ) {\n    this._position = position;\n  }\n  private _position: google.maps.LatLngLiteral | google.maps.LatLng;\n\n  /**\n   * The DOM Element backing the visual of an AdvancedMarkerElement.\n   * Note: AdvancedMarkerElement does not clone the passed-in DOM element. Once the DOM element is passed to an AdvancedMarkerElement, passing the same DOM element to another AdvancedMarkerElement will move the DOM element and cause the previous AdvancedMarkerElement to look empty.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.content\n   */\n  @Input()\n  set content(content: Node | google.maps.marker.PinElement | null) {\n    this._content = content;\n  }\n  private _content: Node | null;\n\n  /**\n   * If true, the AdvancedMarkerElement can be dragged.\n   * Note: AdvancedMarkerElement with altitude is not draggable.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.gmpDraggable\n   */\n  @Input()\n  set gmpDraggable(draggable: boolean) {\n    this._draggable = draggable;\n  }\n  private _draggable: boolean;\n\n  /**\n   * Options for constructing an AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions\n   */\n  @Input()\n  set options(options: google.maps.marker.AdvancedMarkerElementOptions) {\n    this._options = options;\n  }\n  private _options: google.maps.marker.AdvancedMarkerElementOptions;\n\n  /**\n   * AdvancedMarkerElements on the map are prioritized by zIndex, with higher values indicating higher display.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElementOptions.zIndex\n   */\n  @Input()\n  set zIndex(zIndex: number) {\n    this._zIndex = zIndex;\n  }\n  private _zIndex: number;\n\n  /**\n   * This event is fired when the AdvancedMarkerElement element is clicked.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.click\n   */\n  @Output() readonly mapClick: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * This event is fired when the AdvancedMarkerElement is double-clicked.\n   */\n  @Output() readonly mapDblclick: Observable<MouseEvent> =\n    this._eventManager.getLazyEmitter<MouseEvent>('dblclick', 'native');\n\n  /**\n   * This event is fired when the mouse moves out of the AdvancedMarkerElement.\n   */\n  @Output() readonly mapMouseout: Observable<MouseEvent> =\n    this._eventManager.getLazyEmitter<MouseEvent>('mouseout', 'native');\n\n  /**\n   * This event is fired when the mouse moves over the AdvancedMarkerElement.\n   */\n  @Output() readonly mapMouseover: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover', 'native');\n\n  /**\n   * This event is fired when the mouse button is released over the AdvancedMarkerElement.\n   */\n  @Output() readonly mapMouseup: Observable<MouseEvent> =\n    this._eventManager.getLazyEmitter<MouseEvent>('mouseup', 'native');\n\n  /**\n   * This event is fired when the AdvancedMarkerElement is right-clicked.\n   */\n  @Output() readonly mapRightclick: Observable<MouseEvent> =\n    this._eventManager.getLazyEmitter<MouseEvent>('auxclick', 'native');\n\n  /**\n   * This event is repeatedly fired while the user drags the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.drag\n   */\n  @Output() readonly mapDrag: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * This event is fired when the user stops dragging the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragend\n   */\n  @Output() readonly mapDragend: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * This event is fired when the user starts dragging the AdvancedMarkerElement.\n   * https://developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement.dragstart\n   */\n  @Output() readonly mapDragstart: Observable<google.maps.MapMouseEvent> =\n    this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /** Event emitted when the marker is initialized. */\n  @Output() readonly markerInitialized: EventEmitter<google.maps.marker.AdvancedMarkerElement> =\n    new EventEmitter<google.maps.marker.AdvancedMarkerElement>();\n\n  /**\n   * The underlying google.maps.marker.AdvancedMarkerElement object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/advanced-markers#AdvancedMarkerElement\n   */\n  advancedMarker: google.maps.marker.AdvancedMarkerElement;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (!this._googleMap._isBrowser) {\n      return;\n    }\n    if (google.maps.marker?.AdvancedMarkerElement && this._googleMap.googleMap) {\n      this._initialize(this._googleMap.googleMap, google.maps.marker.AdvancedMarkerElement);\n    } else {\n      this._ngZone.runOutsideAngular(() => {\n        Promise.all([this._googleMap._resolveMap(), google.maps.importLibrary('marker')]).then(\n          ([map, lib]) => {\n            this._initialize(map, (lib as google.maps.MarkerLibrary).AdvancedMarkerElement);\n          },\n        );\n      });\n    }\n  }\n\n  private _initialize(\n    map: google.maps.Map,\n    advancedMarkerConstructor: typeof google.maps.marker.AdvancedMarkerElement,\n  ) {\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.advancedMarker = new advancedMarkerConstructor(this._combineOptions());\n      this._assertInitialized();\n      this.advancedMarker.map = map;\n      this._eventManager.setTarget(this.advancedMarker);\n      this.markerInitialized.next(this.advancedMarker);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {advancedMarker, _content, _position, _title, _draggable, _zIndex} = this;\n    if (advancedMarker) {\n      if (changes['title']) {\n        advancedMarker.title = _title;\n      }\n\n      if (changes['gmpDraggable']) {\n        advancedMarker.gmpDraggable = _draggable;\n      }\n\n      if (changes['content']) {\n        advancedMarker.content = _content;\n      }\n\n      if (changes['position']) {\n        advancedMarker.position = _position;\n      }\n\n      if (changes['zIndex']) {\n        advancedMarker.zIndex = _zIndex;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.markerInitialized.complete();\n    this._eventManager.destroy();\n\n    if (this.advancedMarker) {\n      this.advancedMarker.map = null;\n    }\n  }\n\n  getAnchor(): google.maps.marker.AdvancedMarkerElement {\n    this._assertInitialized();\n    return this.advancedMarker;\n  }\n\n  /** Returns a promise that resolves when the marker has been initialized. */\n  _resolveMarker(): Promise<google.maps.marker.AdvancedMarkerElement> {\n    return this.advancedMarker\n      ? Promise.resolve(this.advancedMarker)\n      : this.markerInitialized.pipe(take(1)).toPromise();\n  }\n\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  private _combineOptions(): google.maps.marker.AdvancedMarkerElementOptions {\n    const options = this._options || DEFAULT_MARKER_OPTIONS;\n    return {\n      ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      content: this._content || options.content,\n      zIndex: this._zIndex ?? options.zIndex,\n      gmpDraggable: this._draggable ?? options.gmpDraggable,\n      map: this._googleMap.googleMap,\n    };\n  }\n\n  /** Asserts that the map has been initialized. */\n  private _assertInitialized(): asserts this is {marker: google.maps.marker.AdvancedMarkerElement} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this.advancedMarker) {\n        throw Error(\n          'Cannot interact with a Google Map Marker before it has been ' +\n            'initialized. Please wait for the Marker to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subscription} from 'rxjs';\nimport type {\n  Cluster,\n  MarkerClusterer,\n  onClusterClickHandler,\n  Renderer,\n  Algorithm,\n} from './map-marker-clusterer-types';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MAP_MARKER, Marker, MarkerDirective} from '../marker-utilities';\n\ndeclare const markerClusterer: {\n  MarkerClusterer: typeof MarkerClusterer;\n  defaultOnClusterClickHandler: onClusterClickHandler;\n};\n\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\n@Component({\n  selector: 'map-marker-clusterer',\n  exportAs: 'mapMarkerClusterer',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content/>',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MapMarkerClusterer implements OnInit, OnChanges, OnDestroy {\n  private readonly _googleMap = inject(GoogleMap);\n  private readonly _ngZone = inject(NgZone);\n  private readonly _currentMarkers = new Set<Marker>();\n  private readonly _closestMapEventManager = new MapEventManager(this._ngZone);\n  private _markersSubscription = Subscription.EMPTY;\n\n  /** Whether the clusterer is allowed to be initialized. */\n  private readonly _canInitialize = this._googleMap._isBrowser;\n\n  /**\n   * Used to customize how the marker cluster is rendered.\n   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Renderer.html.\n   */\n  @Input()\n  renderer: Renderer;\n\n  /**\n   * Algorithm used to cluster the markers.\n   * See https://googlemaps.github.io/js-markerclusterer/interfaces/Algorithm.html.\n   */\n  @Input()\n  algorithm: Algorithm;\n\n  /** Emits when clustering has started. */\n  @Output() readonly clusteringbegin: Observable<void> =\n    this._closestMapEventManager.getLazyEmitter<void>('clusteringbegin');\n\n  /** Emits when clustering is done. */\n  @Output() readonly clusteringend: Observable<void> =\n    this._closestMapEventManager.getLazyEmitter<void>('clusteringend');\n\n  /** Emits when a cluster has been clicked. */\n  @Output()\n  readonly clusterClick: EventEmitter<Cluster> = new EventEmitter<Cluster>();\n\n  /** Event emitted when the marker clusterer is initialized. */\n  @Output() readonly markerClustererInitialized: EventEmitter<MarkerClusterer> =\n    new EventEmitter<MarkerClusterer>();\n\n  @ContentChildren(MAP_MARKER, {descendants: true}) _markers: QueryList<MarkerDirective>;\n\n  /** Underlying MarkerClusterer object used to interact with Google Maps. */\n  markerClusterer?: MarkerClusterer;\n\n  async ngOnInit() {\n    if (this._canInitialize) {\n      await this._createCluster();\n\n      // The `clusteringbegin` and `clusteringend` events are\n      // emitted on the map so that's why set it as the target.\n      this._closestMapEventManager.setTarget(this._googleMap.googleMap!);\n    }\n  }\n\n  async ngOnChanges(changes: SimpleChanges) {\n    const change = changes['renderer'] || changes['algorithm'];\n\n    // Since the options are set in the constructor, we have to recreate the cluster if they change.\n    if (this.markerClusterer && change && !change.isFirstChange()) {\n      await this._createCluster();\n    }\n  }\n\n  ngOnDestroy() {\n    this._markersSubscription.unsubscribe();\n    this._closestMapEventManager.destroy();\n    this._destroyCluster();\n  }\n\n  private async _createCluster() {\n    if (!markerClusterer?.MarkerClusterer && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(\n        'MarkerClusterer class not found, cannot construct a marker cluster. ' +\n          'Please install the MarkerClusterer library: ' +\n          'https://github.com/googlemaps/js-markerclusterer',\n      );\n    }\n\n    const map = await this._googleMap._resolveMap();\n    this._destroyCluster();\n\n    // Create the object outside the zone so its events don't trigger change detection.\n    // We'll bring it back in inside the `MapEventManager` only for the events that the\n    // user has subscribed to.\n    this._ngZone.runOutsideAngular(() => {\n      this.markerClusterer = new markerClusterer.MarkerClusterer({\n        map,\n        renderer: this.renderer,\n        algorithm: this.algorithm,\n        onClusterClick: (event, cluster, map) => {\n          if (this.clusterClick.observers.length) {\n            this._ngZone.run(() => this.clusterClick.emit(cluster));\n          } else {\n            markerClusterer.defaultOnClusterClickHandler(event, cluster, map);\n          }\n        },\n      });\n      this.markerClustererInitialized.emit(this.markerClusterer);\n    });\n\n    await this._watchForMarkerChanges();\n  }\n\n  private async _watchForMarkerChanges() {\n    this._assertInitialized();\n    const initialMarkers: Marker[] = [];\n    const markers = await this._getInternalMarkers(this._markers.toArray());\n\n    for (const marker of markers) {\n      this._currentMarkers.add(marker);\n      initialMarkers.push(marker);\n    }\n    this.markerClusterer.addMarkers(initialMarkers);\n\n    this._markersSubscription.unsubscribe();\n    this._markersSubscription = this._markers.changes.subscribe(\n      async (markerComponents: MarkerDirective[]) => {\n        this._assertInitialized();\n        const newMarkers = new Set<Marker>(await this._getInternalMarkers(markerComponents));\n        const markersToAdd: Marker[] = [];\n        const markersToRemove: Marker[] = [];\n        for (const marker of Array.from(newMarkers)) {\n          if (!this._currentMarkers.has(marker)) {\n            this._currentMarkers.add(marker);\n            markersToAdd.push(marker);\n          }\n        }\n        for (const marker of Array.from(this._currentMarkers)) {\n          if (!newMarkers.has(marker)) {\n            markersToRemove.push(marker);\n          }\n        }\n        this.markerClusterer.addMarkers(markersToAdd, true);\n        this.markerClusterer.removeMarkers(markersToRemove, true);\n        this.markerClusterer.render();\n        for (const marker of markersToRemove) {\n          this._currentMarkers.delete(marker);\n        }\n      },\n    );\n  }\n\n  private _destroyCluster() {\n    // TODO(crisbeto): the naming here seems odd, but the `MarkerCluster` method isn't\n    // exposed. All this method seems to do at the time of writing is to call into `reset`.\n    // See: https://github.com/googlemaps/js-markerclusterer/blob/main/src/markerclusterer.ts#L205\n    this.markerClusterer?.onRemove();\n    this.markerClusterer = undefined;\n  }\n\n  private _getInternalMarkers(markers: MarkerDirective[]): Promise<Marker[]> {\n    return Promise.all(markers.map(marker => marker._resolveMarker()));\n  }\n\n  private _assertInitialized(): asserts this is {markerClusterer: MarkerClusterer} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error(\n          'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.',\n        );\n      }\n      if (!this.markerClusterer) {\n        throw Error(\n          'Cannot interact with a MarkerClusterer before it has been initialized. ' +\n            'Please wait for the MarkerClusterer to load before trying to interact with it.',\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {GoogleMap} from './google-map/google-map';\nimport {MapBaseLayer} from './map-base-layer';\nimport {MapBicyclingLayer} from './map-bicycling-layer/map-bicycling-layer';\nimport {MapCircle} from './map-circle/map-circle';\nimport {MapDirectionsRenderer} from './map-directions-renderer/map-directions-renderer';\nimport {MapGroundOverlay} from './map-ground-overlay/map-ground-overlay';\nimport {MapInfoWindow} from './map-info-window/map-info-window';\nimport {MapKmlLayer} from './map-kml-layer/map-kml-layer';\nimport {MapMarker} from './map-marker/map-marker';\nimport {DeprecatedMapMarkerClusterer} from './deprecated-map-marker-clusterer/deprecated-map-marker-clusterer';\nimport {MapPolygon} from './map-polygon/map-polygon';\nimport {MapPolyline} from './map-polyline/map-polyline';\nimport {MapRectangle} from './map-rectangle/map-rectangle';\nimport {MapTrafficLayer} from './map-traffic-layer/map-traffic-layer';\nimport {MapTransitLayer} from './map-transit-layer/map-transit-layer';\nimport {MapHeatmapLayer} from './map-heatmap-layer/map-heatmap-layer';\nimport {MapAdvancedMarker} from './map-advanced-marker/map-advanced-marker';\nimport {MapMarkerClusterer} from './map-marker-clusterer/map-marker-clusterer';\n\nconst COMPONENTS = [\n  GoogleMap,\n  MapBaseLayer,\n  MapBicyclingLayer,\n  MapCircle,\n  MapDirectionsRenderer,\n  MapGroundOverlay,\n  MapHeatmapLayer,\n  MapInfoWindow,\n  MapKmlLayer,\n  MapMarker,\n  MapAdvancedMarker,\n  DeprecatedMapMarkerClusterer,\n  MapPolygon,\n  MapPolyline,\n  MapRectangle,\n  MapTrafficLayer,\n  MapTransitLayer,\n  MapMarkerClusterer,\n];\n\n@NgModule({\n  imports: COMPONENTS,\n  exports: COMPONENTS,\n})\nexport class GoogleMapsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nexport interface MapDirectionsResponse {\n  status: google.maps.DirectionsStatus;\n  result?: google.maps.DirectionsResult;\n}\n\n/**\n * Angular service that wraps the Google Maps DirectionsService from the Google Maps JavaScript\n * API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/directions#DirectionsService\n */\n@Injectable({providedIn: 'root'})\nexport class MapDirectionsService {\n  private readonly _ngZone = inject(NgZone);\n  private _directionsService: google.maps.DirectionsService | undefined;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/directions\n   * #DirectionsService.route\n   */\n  route(request: google.maps.DirectionsRequest): Observable<MapDirectionsResponse> {\n    return new Observable(observer => {\n      this._getService().then(service => {\n        service.route(request, (result, status) => {\n          this._ngZone.run(() => {\n            observer.next({result: result || undefined, status});\n            observer.complete();\n          });\n        });\n      });\n    });\n  }\n\n  private _getService(): Promise<google.maps.DirectionsService> {\n    if (!this._directionsService) {\n      if (google.maps.DirectionsService) {\n        this._directionsService = new google.maps.DirectionsService();\n      } else {\n        return google.maps.importLibrary('routes').then(lib => {\n          this._directionsService = new (lib as google.maps.RoutesLibrary).DirectionsService();\n          return this._directionsService;\n        });\n      }\n    }\n\n    return Promise.resolve(this._directionsService);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nexport interface MapGeocoderResponse {\n  status: google.maps.GeocoderStatus;\n  results: google.maps.GeocoderResult[];\n}\n\n/**\n * Angular service that wraps the Google Maps Geocoder from the Google Maps JavaScript API.\n * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder\n */\n@Injectable({providedIn: 'root'})\nexport class MapGeocoder {\n  private readonly _ngZone = inject(NgZone);\n  private _geocoder: google.maps.Geocoder | undefined;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder.geocode\n   */\n  geocode(request: google.maps.GeocoderRequest): Observable<MapGeocoderResponse> {\n    return new Observable(observer => {\n      this._getGeocoder().then(geocoder => {\n        geocoder.geocode(request, (results, status) => {\n          this._ngZone.run(() => {\n            observer.next({results: results || [], status});\n            observer.complete();\n          });\n        });\n      });\n    });\n  }\n\n  private _getGeocoder(): Promise<google.maps.Geocoder> {\n    if (!this._geocoder) {\n      if (google.maps.Geocoder) {\n        this._geocoder = new google.maps.Geocoder();\n      } else {\n        return google.maps.importLibrary('geocoding').then(lib => {\n          this._geocoder = new (lib as google.maps.GeocodingLibrary).Geocoder();\n          return this._geocoder;\n        });\n      }\n    }\n\n    return Promise.resolve(this._geocoder);\n  }\n}\n"],"names":["BehaviorSubject","undefined","listener","_listeners","remove","constructor","_ngZone","getLazyEmitter","name","type","_targetStream","pipe","switchMap","target","handle","event","run","observer","next","ngDevMode","addEventListener","removeEventListener","Error","addListener","complete","push","DEFAULT_OPTIONS","center","lat","lng","mapTypeId","DEFAULT_HEIGHT","DEFAULT_WIDTH","GoogleMap","_elementRef","inject","ElementRef","googleMap","mapId","_zoom","_options","options","platformId","PLATFORM_ID","googleMapsWindow","gm_authFailure","_existingAuthFailureCallback","authFailure","emit","_setSize","changes","_center","setCenter","_isBrowser","_mapEl","nativeElement","querySelector","_initialize","google","maps","Map","importLibrary","then","lib","mapConstructor","_combineOptions","_eventManager","setTarget","destroy","window","fitBounds","bounds","padding","_assertInitialized","panBy","x","y","panTo","latLng","panToBounds","latLngBounds","getBounds","getCenter","getClickableIcons","getMapTypeId","mapTypes","ctorParameters","propDecorators","height","Input","Output","coerceCssPixelValue","value","ngOnInit","_initializeObject","ngOnDestroy","MapBicyclingLayer","bicyclingLayer","bicyclingLayerInitialized","EventEmitter","_map","BicyclingLayer","_zone","runOutsideAngular","map","layerConstructor","setMap","_assertLayerInitialized","Subject","radius","_radius","circleInitialized","take","Circle","Promise","all","_resolveMap","circle","_watchForOptionsChanges","_watchForCenterChanges","_watchForRadiusChanges","_destroyed","getEditable","combinedOptions","subscribe","directions","_directions","directionsRendererInitialized","DirectionsRenderer","_googleMap","directionsRenderer","ngOnChanges","setOptions","NgZone","_bounds","_hasWatchers","groundOverlay","opacity","_opacity","mapClick","groundOverlayInitialized","takeUntil","GroundOverlay","clickable","_watchForUrlChanges","getOpacity","MapInfoWindow","_destroy","infoWindow","infoWindowInitialized","InfoWindow","_watchForPositionChanges","close","getContent","getZIndex","openAdvancedMarkerElement","advancedMarkerElement","content","shouldFocus","anchorObject","anchor","getAnchor","open","MapKmlLayer","kmlLayer","kmlClick","KmlLayer","kmlLayerInitialized","getDefaultViewport","getMetadata","getStatus","url","position","title","_title","_position","_label","icon","visible","markerInitialized","Marker","markerConstructor","marker","_clickable","_icon","_visible","setTitle","setPosition","setLabel","setClickable","setIcon","setVisible","getAnimation","getClickable","getCursor","getDraggable","getIcon","getLabel","MapMarker","decorators","Directive","selector","DEFAULT_CLUSTERER_OPTIONS","_canInitialize","ariaLabelFn","averageCenter","_averageCenter","batchSizeIE","calculator","_calculator","clusterClass","_clusterClass","enableRetinaIcons","_enableRetinaIcons","gridSize","ignoreHidden","_ignoreHidden","imagePath","_maxZoom","minimumClusterSize","styles","_styles","zIndex","_zIndex","zoomOnClick","_zoomOnClick","clusteringbegin","clusterClick","_markers","markerClusterer","markerClustererInitialized","ngAfterContentInit","_watchForMarkerChanges","clusterer","_batchSizeIE","_gridSize","_imageExtension","_imagePath","_imageSizes","_minimumClusterSize","setAverageCenter","setBatchSizeIE","setCalculator","setEnableRetinaIcons","setGridSize","setIgnoreHidden","setImageExtension","setImagePath","setImageSizes","setMaxZoom","setMinimumClusterSize","setStyles","setZIndex","setZoomOnClick","fitMapToMarkers","getAverageCenter","getClusterClass","getClusters","getEnableRetinaIcons","getGridSize","getIgnoreHidden","getZoomOnClick","ContentChildren","MapPolygon","polygon","polygonClick","polygonDragend","polygonDragstart","polygonMousedown","polygonMouseout","polygonMouseover","polygonRightclick","Polygon","polygonConstructor","polygonInitialized","_watchForPathChanges","getPath","getPaths","MapPolyline","polyline","polylineDrag","polylineDragstart","polylineMousemove","polylineMouseover","polylineRightclick","Polyline","polylineConstructor","polylineInitialized","getVisible","MapRectangle","rectangle","boundsChanged","rectangleInitialized","Rectangle","rectangleConstructor","MapTrafficLayer","trafficLayer","trafficLayerInitialized","TrafficLayer","MapTransitLayer","transitLayer","transitLayerInitialized","TransitLayer","data","_data","visualization","HeatmapLayer","heatmapConstructor","heatmapInitialized","heatmap","setData","_normalizeData","_content","gmpDraggable","draggable","_draggable","mapMouseout","advancedMarker","AdvancedMarkerElement","advancedMarkerConstructor","exportAs","providers","MapMarkerClusterer","renderer","_closestMapEventManager","change","_markersSubscription","unsubscribe","_destroyCluster","MarkerClusterer","onClusterClick","cluster","observers","length","defaultOnClusterClickHandler","initialMarkers","markers","_getInternalMarkers","toArray","markerComponents","Set","Array","from","newMarkers","has","add","GoogleMapsModule","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","deps","ɵɵFactoryTarget","NgModule","ɵɵngDeclareNgModule","imports","exports","COMPONENTS","route","request","Observable","DirectionsService","_directionsService","MapGeocoder","geocode","_getGeocoder","geocoder","results","status","Geocoder","_geocoder"],"mappings":"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"}